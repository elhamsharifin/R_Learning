X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,16/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
### sampling model 2: define urn inside sample function by noting probabilities and not colors
n <- 1000
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19)) #1000 dependent draw
S <- sum(X)  #total winning: sum of draws
S
#18/(38) of winning casino and 20/(38) of loosing. every green color is corresponding with loosing. but poeple only can choose from 38.
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000
n <- 1000
winning <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
})
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000
n <- 1000
replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
mean(S)
})
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000
n <- 1000
winning <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
mean(S)
})
winning
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S>0)  #probability of casino losing
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
### we can plot a histogram of observes S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observes S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
data.frame(S=S) %>%
ggplot(aes(S,density)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..count..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
min(S)
max(S)
library(tidyverse)
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
library(tidyverse)
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density2 <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density2,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density2,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),sd(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### what is the chance of landing balls in green pockets:
2/(18+18+2)
### what is the chance of landing balls in green pockets:
green <- 2
red <- 18
black <- 18
P_green <- green/(green+red+black)
p_green
### what is the chance of landing balls in green pockets:
green <- 2
red <- 18
black <- 18
P_green <- green/(green+red+black)
P_green
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red_black)
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(+17,-1),1,prob=c(p_green,p_not_green))
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(17,-1),1,prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green))
X
X <- sample(c(17,-1), 1000, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green)) #replace:false
X
### compute the expected value of X:
X <- sample(c(17,-1), 1000, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green)) #replace:false
X
### compute the expected value of X:
E_X <- 17 * p_green + (-1)*p_not_green #E[X]=(ap)+(b(1-p))
E_X
(17-(-1))*sqrt(p_green*p_not_green)
abs(17-(-1))*sqrt(p_green*p_not_green)  # |b-a|sqrt(p(1-p))
### Predict sum of winnings
### create a random variable S which sums your winnings after betting on green 1,000 times.
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
n <- 1000
X <- sample(c(17,-1),1000,replace=TRUE,prob=c(p_green,p_not_green))
sum(X)
E_S <- n *((p_green*17)+(p_not_green)*(-1))
E_S
se_S <- sqrt(n)*abs(-1+-17)*sqrt(p_green*p_not_green)
se_S <- sqrt(n)*abs(-1+-17)*sqrt(p_green*p_not_green)
se_S
