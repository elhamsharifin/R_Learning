show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
stick <- my_pick
stick == prize_door
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
stick <- my_pick
stick == prize_door
#Montocarlo simulation
B <- 10000
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)    # open door with no prize that isn't chosen
stick <- my_pick    # stick with original door
stick == prize_door    # test whether the original door has the prize
})
mean(stick)    # probability of choosing prize door when sticking
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
switch <- doors[!doors%in%c(my_pick,show)]  ## switch to the door that wasn't chosen first or opened
switch
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
switch <- doors[!doors%in%c(my_pick,show)]  ## switch to the door that wasn't chosen first or opened
switch
switch == prize_door
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
switch <- doors[!doors%in%c(my_pick,show)]  ## switch to the door that wasn't chosen first or opened
switch
switch == prize_door
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
switch <- doors[!doors%in%c(my_pick,show)]  ## switch to the door that wasn't chosen first or opened
switch
switch == prize_door
# Monto_carlo simulation
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen first
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
switch == prize_door    # test whether the switched door has the prize
})
doors <- as.character(1:3)
doors
prize <- sample(c("car","goat","goat")) # puts prizes in random order
prize
prize_door <- doors[prize=="car"] # note which door has prize
prize_door
my_pick <- sample(doors,1) # note which door is chosen
my_pick
show <- sample(doors[!doors %in% c(my_pick,prize_door)],1) # open door with no prize that isn't chosen
show
switch <- doors[!doors%in%c(my_pick,show)]  ## switch to the door that wasn't chosen first or opened
switch
switch == prize_door
# Monto_carlo simulation
B <- 10000
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen first
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
switch == prize_door    # test whether the switched door has the prize
})
mean(switch)    # probability of choosing prize door when switching
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
any(simulated_games==c("win"))
})
mean(perspolis_win)
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
any(simulated_games==c("win"))
})
mean(Warriors_win)
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
any(simulated_games==c("win","win"))
})
mean(Warriors_win)
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
any(simulated_games==c("win","win","win"))
})
?rep
n <- 6
# Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
l <- list(0:1)
# Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
possibilities <- expand.grid(rep(l, n))
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities)>=4
# Calculate the proportion of 'results' in which t
l
possibilities
rep(list(c(0,1)),6)
rep(list(c(0,1)),6)
expand.grid(rep(list(c(0,1)),6))
?rowSums
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
rowSums(simulated_games==1)>=4
})
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
rowSums(simulated_games=="win")>=4
})
simulated_games <- sample (c("win","lose"),4,replace = TRUE, prob = c(0.5,0.5))
simulated_games
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
Warriors_win
View(Warriors_win)
View(Warriors_win)
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
rowcol(Warriors_win=="win")>=4
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
rowCol(Warriors_win=="win")>=4
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 100
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
colSums(Warriors_win=="win")>=4
mean(Warriors_win)
B <- 10
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
colSums(Warriors_win=="win")>=4
mean(Warriors_win)
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
colSums(Warriors_win=="win")>=4
win <- colSums(Warriors_win=="win")>=4
mean(win)
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 1000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
win <- colSums(Warriors_win=="win")>=4
mean(win)
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
win <- colSums(Warriors_win=="win")>=4
mean(win)
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
View(Warriors_win)
B <- 10000
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),7,replace = TRUE, prob = c(0.5,0.5))
any(simulated_games[1])=="win"
})
n <- 6 #the remaining games
n
outcomes <- c(0:1)  #the possible results of every game
outcomes
l < rep(list(outcomes),n)  #list of all possible outcomes in all remaining games
n <- 6 #the remaining games
n
outcomes <- c(0:1)  #the possible results of every game
outcomes
l <- rep(list(outcomes),n)  #list of all possible outcomes in all remaining games
l
possibilities <- expand.grid(l)  #all combinations of possible outcomes for the remaining games
possibilities
results <- rowSums(possibilities==1)>=4 #the number of win > 4
results
mean(results)
l <- rep(list(outcomes),n)  #list of all possible outcomes in all remaining games
l
possibilities <- expand.grid(l)
outcomes <- c(0:1)  #the possible results of every game
outcomes
l <- rep(list(outcomes),n)
l
outcomes <- c(0,1)  #the possible results of every game
outcomes
l <- rep(outcomes,n)
l
possibilities <- expand.grid(l)
outcomes <- list(c(0:1))
outcomes
l <- rep(outcomes,6)
View(l)
possibilities <- expand.grid(l)
possibilities <- expand.grid(l)
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0,1)
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
outcomes <- c(0,1)
outcomes
l <- rep(list(outcomes),n)
l
outcomes <- c(0,1)
outcomes
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0,1)
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0,1)
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c("0","1")
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0,1)
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
# Assign a variable 'n' as the number of remaining games.
n <- 6
n
# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0:1)
outcomes
# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`.
l <- rep(list(outcomes),n)
l
# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)
possibilities
# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities==1)>=4
results
# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
B <- 10000
set.seed(1) #if we want that our answer become identical with edx
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob =   c(0.5,0.5))
sum(cavs_wins)>=4
})
## Monto Carlo simulation
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
set.seed(1) #if we want that our answer become identical with edx
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
sum(cavs_wins)>=4
})
## Monto Carlo simulation
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
set.seed(1) #if we want that our answer become identical with edx
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
sum(simulated_games)>=4
})
B <- 10000
set.seed(1) #if we want that our answer become identical with edx
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
sum(simulated_games)>=4
})
x = [2,5,6,7]
x=c(1:10)
sum(x)
## Monto Carlo simulation
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
simulated_games
B <- 10000
set.seed(1) #if we want that our answer become identical with edx
Warriors_win <- replicate(B,{
simulated_games <- sample (c("win","lose"),6,replace = TRUE, prob = c(0.5,0.5))
})
win <- colSums(Warriors_win=="win")>=4
mean(win)
p <- seq(0.5,0.95,0.025)  #probability that team A wins
## Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
prob_win <- function(p){
results <- replicate(B,{
b_win <- sample(c(0,1),7,replac=TRUE,prob=c(1-p,p))
sum(b_win) >= 4
})
mean(results)
}
p <- seq(0.5,0.95,0.025)  #probability that team A wins
## Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
prob_win <- function(p){
results <- replicate(B,{
b_win <- sample(c(0,1),7,replac=TRUE,prob=c(1-p,p))
sum(b_win) >= 4
})
mean(results)
}
Pr <- sapply(p,prob_win) ## Apply the 'prob_win' function across the vector of probabilities that team A will win to determine the probability that team B will win. Call this object 'Pr'.
plot(p,Pr)
p <- seq(0.5,0.95,0.025)
p
prob=c(1-p,p)
prob
p <- seq(0.5,0.95,0.025)  #probability that team A wins
## Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
prob_win <- function(p){
results <- replicate(B,{
b_win <- sample(c(0,1),7,replace = TRUE, prob=c(1-p,p)) #1-p:0 losing #p:1 wining
sum(b_win) >= 4
})
mean(results)
}
Pr <- sapply(p,prob_win) ## Apply the 'prob_win' function across the vector of probabilities that team A will win to determine the probability that team B will win. Call this object 'Pr'.
plot(p,Pr)
B <- 10000
compute_win <- function(n){
results <- replicate(B,{
win_A <- sample(c(1,0),n,replace=TRUE,prob=c(0.75,0.25))
sum(win_A)>=(n/2+1)
})
mean(results)
}
compute_win(7)
B <- 10000
compute_win <- function(n,p=0.75){
results <- replicate(B,{
b_win <- sample(c(1,0),n,replace=TRUE,prob=c(1-p,p))
sum(win_A)>=(n+1)/2
})
mean(results)
}
n <- seq(1,25,2)
Pr <- sapply(n,compute_win)
B <- 10000
compute_win <- function(n,p=0.75){
results <- replicate(B,{
b_win <- sample(c(1,0),n,replace=TRUE,prob=c(1-p,p))
sum(b_win)>=(n+1)/2
})
mean(results)
}
n <- seq(1,25,2)
Pr <- sapply(n,compute_win)
plot(n,Pr)
x <1:10
