z <- qnorm(0.01)
z
l <- loss_per_closure
n <- ceiling(z^2 *abs(l-x)*sqrt(p*(1-p)))
n
n*(loss_per_closure*p+x*(1-p))
### expected value with higher default rate and interest rate
p <- 0.04
loss_per_closure <- -200000
r <- 0.05
x <- 0.05*180000
loss_per_closure*p + x*(1-p) #Positive deposit earned by bank
### calculating number of loans for desired probability of losing money
z <- qnorm(0.01)
z
l <- loss_per_closure
n <- ceiling(z^2 *abs(l-x)*sqrt(p*(1-p)))
n  #the number of loans for that the probbaility of loan become 1%
n*(loss_per_closure*p+x*(1-p))
n
n <- ceiling(z^2 *abs(l-x)*sqrt(p*(1-p)))
n
n <- ceiling(z^2 *(l-x)^2*(p*(1-p))/(l*p+x*(1-p)))^2
n  #the number of loans for that the probbaility of loan become 1%
n <- ceiling(z^2 *(l-x)^2*(p*(1-p))/(l*p+x*(1-p))^2)
n
n*(loss_per_closure*p+x*(1-p))
### calculating number of loans for desired probability of losing money
z <- qnorm(0.01)
z
l <- loss_per_closure
n <- ceiling(z^2 *(l-x)^2*(p*(1-p))/(l*p+x*(1-p))^2)
n  #the number of loans for that the probbaility of loan become 1%
n*(loss_per_closure*p+x*(1-p))
B <- 10000
profit <- replicate(B,{
draws <- sample(c(l,x),n,replace=TRUE,prob=c(p,1-p))
sum(draws)
})
mean(profit<=0)
### calculating number of loans for desired probability of losing money
z <- qnorm(0.01)
z
l <- loss_per_closure
n <- ceiling(z^2 *(l-x)^2*(p*(1-p))/(l*p+x*(1-p))^2)
n  #the number of loans for that the probbaility of loan become 1%
n*(loss_per_closure*p+x*(1-p))
### running by Monto-Carlo simulation
B <- 10000
profit <- replicate(B,{
draws <- sample(c(loss_per_closure,x),n,replace=TRUE,prob=c(p,1-p))
sum(draws)
})
mean(profit<=0)  #the percent of mean of loosing money
### Monte Carlo simulation with unknown default probability
p <- 0.04
x <- 0.05*180000
B <- 10000
profit <- replicate(B,{
new_p <- 0.04 + sample(seq(-0.01,0.01,length=100),1)
draws <- sample(c(loss_per_closure,x),n,replace=TRUE,prob=c(new_p,1-new_p))
sum(draws)
})
mean(profit)
### Monte Carlo simulation with unknown default probability
p <- 0.04
x <- 0.05*180000
B <- 10000
profit <- replicate(B,{
new_p <- 0.04 + sample(seq(-0.01,0.01,length=100),1)
draws <- sample(c(loss_per_closure,x),n,replace=TRUE,prob=c(new_p,1-new_p))
sum(draws)
})
mean(profit) #expected profit
mean(profit<0) #probaility of losing money
mean(profit<-10000000) #probability of losing money over $10M
mean(profit<-10000000)
mean(profit<0)
### Monte Carlo simulation with unknown default probability
p <- 0.04
x <- 0.05*180000
B <- 10000
profit <- replicate(B,{
new_p <- 0.04 + sample(seq(-0.01,0.01,length=100),1)
draws <- sample(c(loss_per_closure,x),n,replace=TRUE,prob=c(new_p,1-new_p))
sum(draws)
})
mean(profit) #expected profit
mean(profit<0) #probaility of losing money will increase! dangerous!
mean(profit<-10000000) #probability of losing money over $10M
mean(profit<-10000000) #probability of losing money over $10M
profit <- replicate(B,{
new_p <- 0.04 + sample(seq(-0.01,0.01,length=100),1)
draws <- sample(c(loss_per_closure,x),n,replace=TRUE,prob=c(new_p,1-new_p))
sum(draws)
})
mean(profit) #expected profit
mean(profit<0) #probaility of losing money will increase! dangerous!
mean(profit< -10000000) #probability of losing money over $10M
library(tidyverse)
data.farme(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions)) +
geom_histogram(..count..)
data.frame(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions)) +
geom_histogram(..count..)
data.frame(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions,..count..)) +
geom_histogram()
data.frame(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions,..count..)) +
geom_histogram(binwidth=0.6,col="black")
data.frame(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions,..count..)) +
geom_histogram(binwidth=1,col="black")
data.frame(profit_in_millions=profit/10^6) %>%
ggplot(aes(profit_in_millions,..count..)) +
geom_histogram(binwidth=5,col="black")
set.seed(1,sample.kind="Rounding")
n <- 10000
l_closure <- 200000
p <- 0.03
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
# assume 1 show default, and 0 indicates a payment
set.seed(1,sample.kind="Rounding")
n <- 10000
l_closure <- 200000
p <- 0.03
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
defaults
set.seed(1,sample.kind="Rounding")
n <- 10000
l_closure <- 200000
p <- 0.03
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*l_closure
# assume 1 show default, and 0 indicates a payment
B <- 10000
S <- replicate(B,{
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*loss_per_foreclosure
})
set.seed(1,sample.kind="Rounding")
n <- 10000
loss_per_foreclosure <- 200000
p <- 0.03
### store the earning of your bank in variable S. what is the total money which bank lose?
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
S <- sum(defaults)*loss_per_foreclosure
# assume 1 show default, and 0 indicates a payment
### Monto Carlo simualtion
B <- 10000
S <- replicate(B,{
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*loss_per_foreclosure
})
set.seed(1,sample.kind="Rounding")
n <- 10000
loss_per_foreclosure <- 200000
p <- 0.03
### store the earning of your bank in variable S. what is the total money which bank lose?
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
S <- sum(defaults)*loss_per_foreclosure
# assume 1 show default, and 0 indicates a payment
### Monto Carlo simualtion
B <- 10000
S <- replicate(B,{
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*loss_per_foreclosure
})
set.seed(1,sample.kind="Rounding")
n <- 10000
loss_per_foreclosure <- -200000
p <- 0.03
### store the earning of your bank in variable S. what is the total money which bank lose?
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
S <- sum(defaults)*loss_per_foreclosure
# assume 1 show default, and 0 indicates a payment
### Monto Carlo simualtion
B <- 10000
S <- replicate(B,{
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*loss_per_foreclosure
})
### Monto Carlo simualtion
set.seed(1,sample.kind="Rounding")
B <- 10000
S <- replicate(B,{
defaults <- sample(c(0,1),n,replace=TRUE,prob=c(1-p,p))
sum(defaults)*loss_per_foreclosure
})
hist(S)
E_S <- loss_per_foreclosure*(p)+x(1-p)
E_S
x <- 0
E_S <- loss_per_foreclosure*(p)+x(1-p)
x <- 0
E_S <- loss_per_foreclosure*(p)+x*(1-p)
E_S
n <- 10000
x <- 0
E_S <- n*(loss_per_foreclosure*(p)+x*(1-p))
E_S
n <- 10000
x <- 0
SE_S <- abs(0-loss_per_foreclosure)sqrt(n*p*(1-p))
SE_S <- abs(0-loss_per_foreclosure)*sqrt(n*p*(1-p))
SE_S
### in the previous part, band doesn not earn any money and it was likely thta people dont pay their loans and bank lose money.
rate <- -p*loss_per_foreclosure/(180000*(1-p))
rate
x <- -p*loss_per_foreclosure/(1-p)
x
rate <- x/180000
rate
z <- qnorm(0.05)
z
x=-loss_per_foreclosure*(n*p-z*(sqrt(n*p*(1-p))))/{n*(1-p)+z*sqrt(n*p*(1-p))}
x
x=-loss_per_foreclosure*(n*p-z*(sqrt(n*p*(1-p))))/{n*(1-p)+z*sqrt(n*p*(1-p))}
x
x/180000
library(tidyverse)
library(dslabs)
data(death_prob)
library(tidyverse)
library(dslabs)
data(death_prob)
install.packages(dslabs)
library(tidyverse)
library(dslabs)
data(death_prob)
install.packages("dslabs")
install.packages("dslabs")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dslabs)
data(death_prob)
install.packages("dslabs")
install.packages("dslabs")
View(death_prob)
View(death_prob)
knitr::opts_chunk$set(echo = TRUE)
head(death_prob)
p <- death_prob %>% filter(sex="Female",age="50")
library(tidyverse)
library(dslabs)
data(death_prob)
head(death_prob)
#install.packages("dslabs")
### what is the death probaility of death of a 50 years old female:
p <- death_prob %>%
filter(sex="Female",age="50")
p <- death_prob %>%
filter(sex="Female",age="50")
p <- death_prob %>%
filter(sex=="Female",age=="50")
p
p <- death_prob %>%
filter(sex=="Female"& age=="50") %>%
.$prob
p
death_prob %>%
filter(sex=="Female"& age=="50") %>%
.$prob
loss <- 150000
premium <- 1150
E_v <- loss * p_death + premium * (1-p)
library(tidyverse)
library(dslabs)
data(death_prob)
head(death_prob)
#install.packages("dslabs")
### what is the death probaility of death of a 50 years old female:
p_death <- death_prob %>%
filter(sex=="Female"& age=="50") %>%
.$prob
### what is the expected value of company's net profit for insuring a femal 50 years old in one year? (premium: $1150, lose $150,000)
loss <- 150000
premium <- 1150
E_v <- loss * p_death + premium * (1-p)
E_v
E_v <- loss*p + premium*(1-p)
E_v
loss <- -150000
premium <- +1150
E_v <- loss*p + premium*(1-p)
E_v
data(death_prob)
p <- death_prob %>%
filter(sex=="Female"& age=="50") %>%
.$prob
a <- -150000  #correspond with p (death)
b <- +1150    #corespond with profit (premium), 1-p
E_v <- a*p + b*(1-p)
E_v
SE <- abs(b-a)*sqrt(n*p*(1-p))
SE <- abs(b-a)*sqrt(p*(1-p))
SE
n*a*p + b*(1-p)
n <- 1000
n*a*p + b*(1-p)
n <- 1000
n*(a*p + b*(1-p))
sqrt(n)*( abs(b-a)*sqrt(p*(1-p)))
a <- -150000  #correspond with p (death)
b <- +1150    #corespond with profit (premium), 1-p
Ev <- a*p + b*(1-p)
Ev
### what is the standard error of benefit for 1 femal of 50 years old within a year.
SE <- abs(b-a)*sqrt(p*(1-p))
SE
### the expected value of company for all 1000 insured people
n <- 1000
Ev_all <- n*(a*p + b*(1-p))
### the standard error of company for all 1000 insured people
SE_all <- sqrt(n)*( abs(b-a)*sqrt(p*(1-p)))
pnorm(p,Ev_all,SE_all)
pnorm(0,Ev_all,SE_all)
pnorm(0,Ev_all,SE_all)
p_male <- death_prob %>%
filter(sex=="Male"& age=="50") %>%
.$prob
p_male <- death_prob %>%
filter(sex=="Male"& age=="50") %>%
.$prob
p_male
Ev_male <- 700000
n <- 1000
b <- ((Ev_male/n)-ap_male)/(1-p_male)
Ev_male <- 700000
n <- 1000
a <- -150000
b <- ((Ev_male/n)-a*p_male)/(1-p_male)
b
SE_all_male <- sqrt(n)*abs(b-a)*aqrt(p*(1-p))
SE_all_male <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
SE_all_male
Ev_male <- 700000
n <- 1000
a <- -150000
b <- ((Ev_male/n)-a*p_male)/(1-p_male)
b
SE_all_male <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
SE_all_male
Ev_male <- 700000
n <- 1000
a_male <- -150000
b_male <- ((Ev_male/n)-a*p_male)/(1-p_male)
b_male
### using the premium calculated for male, calculate teh standar error of sum of 1000 policies:
SE_all_male <- sqrt(n)*abs(b_male-a_male)*sqrt(p_male*(1-p_male))
SE_all_male
pnorm(0,Ev_male,SE_all_male)
p <- 0.015  # the probability of death
a <- -150000
b <- 1150
n <- 1000
Ev_new <- n*(a*p+b*(1-p))
Ev_new
SE_new <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
SE_new
pnorm(0,Ev_new,SE_new )
1-pnorm(1000000,Ev_new,SE_new)
pnorm(1000000,Ev_new,SE_new)
### what is the expected value of sum of 1000 policies?
p <- 0.015  # the probability of death
a <- -150000
b <- 1150
n <- 1000
Ev_new <- n*(a*p+b*(1-p))
Ev_new
### what is the standard error of the expected value of the company for 1000 policies?
SE_new <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
SE_new
### what is the probability of compan's losing money?
pnorm(0,Ev_new,SE_new )
### suppose company can afford to sustan one-time losses of $1M. But, it will be out of market for larger of this amount. What is the probability of losing money more than $1M?
1-pnorm(1000000,Ev_new,SE_new)
1-pnorm(-1000000,Ev_new,SE_new)
pnorm(-1000000,Ev_new,SE_new)
pnorm(-10^6,Ev_new,SE_new)
p <- seq(.01, .03, .001)
n <- 1000
a <- -150000
b <- 1150
S <- function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
}
sapply(S,p)
p_lose <- sapply(p,S)
p_lose <- sapply(p,S)
min(which[p_lose>=0.90])
p_lose <- sapply(p,S)
data.frame(p_lose <- p_close) %>%
filter(p_lose<=0.90)
p_lose <- sapply(p,S)
data.frame(p_lose <- p_close) %>%
filter(p_lose<=0.90)
data.frame(p_lose <- p_lose) %>%
filter(p_lose<=0.90)
p_lose <- sapply(p,S)
data.frame(p_lose <- p_lose) %>%
filter(p_lose>=0.90)
S <- saaply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
})
S <- saply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
})
S <- sapply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
})
p_death <- sapply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
})
p_lose <- sapply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(0,Ev,SE)
})
min(which(p_lose >= 0.90))
data.frame(p,p_lose) %>%
filter(p_lose > 0.90)
data.frame(p,p_lose) %>%
filter(p_lose > 0.90) %>%
pull(p) %>%
min()
p_lose_1M <- sapply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(-1000000,Ev,SE)
})
data.frame(p,p_lose_1M) %>%
filter(p_lose > 0.90) %>%
pull(p) %>%
min()
p <- seq(.01, .03, .0025)
p_lose_1M <- sapply(p,function(p){
Ev <- n*(a*p+b*(1-p))
SE <- sqrt(n)*abs(b-a)*sqrt(p*(1-p))
pnorm(-1000000,Ev,SE)
})
data.frame(p,p_lose_1M) %>%
filter(p_lose_1M > 0.90) %>%
pull(p) %>%
min()
set.seed(25, sample.kind = "Rounding")
X <- sample(c(1,0),n,replace=TRUE,prob=c(p,1-p)) #loss:p, corresponds 1
set.seed(25, sample.kind = "Rounding")
X <- sample(c(1,0),n,replace=TRUE,prob=c(_loss,1-p_loss)) #loss:p, corresponds 1
X <- sample(c(1,0),n,replace=TRUE,prob=c(p_loss,1-p_loss)) #loss:p, corresponds 1
p_loss <- 0.015
set.seed(25, sample.kind = "Rounding")
X <- sample(c(1,0),n,replace=TRUE,prob=c(p_loss,1-p_loss))
sum(X)*-150000
sum(X)*-150000/10^6
n <- 1000
loss <- -150000
profit <- 1150
p_loss <- 0.015
### how much is the reported profit (or loss) in million?
set.seed(25, sample.kind = "Rounding")
X <- sample(c(-150000,1150),n,replace=TRUE,prob=c(p_loss,1-p_loss)) #loss:p, corresponds 1
sum(X)
sum(X)/10^6
### Monto-Carlo simulation:
n <- 1000
loss <- -150000
profit <- 1150
p_loss <- 0.015
### how much is the reported profit (or loss) in million?
set.seed(25, sample.kind = "Rounding")
X <- sample(c(loss,profit),n,replace=TRUE,prob=c(p_loss,1-p_loss)) #loss:p, corresponds 1
sum(X)/10^6
B <- 10000
set.seed(26, sample.kind = "Rounding") # based on question: 26
S_lose <- replicate(B,{
sample(c(loss,profit),n,replace=TRUE,prob=c(p_loss,1-p_loss))
sum(X)
})
lose <- mean(S_lose)
lose
S_lose <- replicate(B,{
sample(c(loss,profit),n,replace=TRUE,prob=c(p_loss,1-p_loss))
sum(X)
})
mean(S_lose < -1000000)
set.seed(26, sample.kind = "Rounding") # based on question: 26
S_lose <- replicate(B,{
X <- sample(c(loss,profit),n,replace=TRUE,prob=c(p_loss,1-p_loss))
sum(X)
})
mean(S_lose < -1000000)
mean(S_lose > -1000000)
set.seed(27, sample.kind = "Rounding") # based on question: 27
S_lose <- replicate(B,{
X <- sample(c(loss,profit),n,replace=TRUE,prob=c(p_loss,1-p_loss))
sum(X)
})
mean(S_lose > -1000000)
mean(S_lose < -1000000)
