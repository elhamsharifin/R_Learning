knitr::opts_chunk$set(echo = TRUE)
print("hello world")
print("hello world")
heads <- rep(c("red","blue"), times = c(2,3))
beads <- rep(c("red","blue"), times = c(2,3))
beads <- rep(c("red","blue"), times = c(2,3))
beads <- rep(c("red","blue"), times = c(2,3))
bead
beads <- rep(c("red","blue"), times = c(2,3))
beads
beads <- rep(c("red","blue"), times = c(2,3))
beads
sample(beads,1)
B <- 1000
events <- replicate(B,sample(beads,1))
events
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it show us 1000 different events of beads
tab <- table(events)
tab
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it show us 1000 different events of beads
tab <- table(events)
tab
?table
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it show us 1000 different events of beads
tab <- table(events)
tab
prob.table(tab)
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it show us 1000 different events of beads
tab <- table(events)
tab
prop.table(tab)
beads <- rep
sample(b(c("red","blue"), times = c(2,3))
beadseads,1)
beads <- rep
sample(b(c("red","blue"), times = c(2,3)))
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,2)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,5)
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it creats 1000 random events of beads
tab <- table(events)
tab
prop.table(tab)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,6)
events <- sample(beads,B,replace=TRUE)
prop.table(table(events))
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,5) #it shows 1 random sample of beads
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,5) #it shows 5 random sample of beads
sample(beads,6) #error, it will not replicate
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,5) #it shows 5 random sample of beads
sample(beads,6) #error, it will not replicate
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,5) #it shows 5 random sample of beads
#sample(beads,6) #error, it will not replicate
sample(beads,6,replace=TRUE) #error, it will not replicate
beads <- rep(c("red","blue"),times=c(2,3)) #creates a run with 2 red and 3 blue
beads
sample(beads,1) #it shows 1 random sample of beads
sample(beads,5) #it shows 5 random sample of beads
sample(beads,5)
#sample(beads,6) #error, it will not replicate
sample(beads,6,replace=TRUE) #it will replicate
B <- 1000
events <- replicate(B,sample(beads,1))
#events  it creats 1000 random events of beads
tab <- table(events)
tab
prop.table(tab)
events <- sample(beads,B,replace=TRUE)
prop.table(table(events))
events <- sample(beads,B,replace=FALSE)
events <- sample(beads,B,replace=TRUE)
prop.table(table(events))
B <- 1000 #how many time to draw one bead
events <- replicate(B,sample(beads,2)) #draw 1 beads, B times
#events  it creats 1000 random events of beads
tab <- table(events)
tab
prop.table(tab)
B <- 1000 #how many time to draw one bead
events <- replicate(B,sample(beads,6)) #draw 1 beads, B times
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,6) #error: because it will do it without replacement
events <- sample(beads,B,replace=TRUE)
prop.table(table(events))
B <- 1000 #how many time to draw one bead
events <- replicate(B,sample(beads,6)) #draw 1 beads, B times
?sample
B <- 1000 #how many time to draw one bead
events <- replicate(B,sample(beads,6,replace=TRUE)) #draw 1 beads, B times
#events  it creats 1000 random events of beads
tab <- table(events)
tab
prop.table(tab)
set.seed(1986)
set.seed(1986)
?set.seed
set.seed(1)
set.seed(1,sample.kind="Rounding") #will make R 3.6 generate a seed as in R 3.5
beads <- rep(c("blue","red"),times=c(2,3))
beads
mean(beads=="blue")
beads <- rep(c("blue","red"),times=c(3,2))
beads
mean(beads=="blue")
mean(beads=="blue")
x <- sample(beads,5)
x[2:5]
x <- sample(beads,5)
set.seed(1,sample.kind="Rounding")
x[2:5] #now the probability of red is one
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
x <- sample(card,1)
x[1:15]
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
x <- sample(card,15)
x[1:15]
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1,replace=TRUE) #it gives us the distibution
prop.table(table(events))
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(beads=="cyan")
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
p(cyan_1) <-  cyan / (cyan + magenta + yellow) #peobability of choosing cyan in the first round
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
p(cyan_1) <-  cyan / (cyan + magenta + yellow) #peobability of choosing cyan in the first round
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
p(1) <-  cyan / (cyan + magenta + yellow) #peobability of choosing cyan in the first round
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
p_cyan_1 <-  cyan / (cyan + magenta + yellow) #peobability of choosing cyan in the first round
p_not_cyan <- (magenta + yellow)/(cyan + magenta + yellow-1) #probability of not choosing cyan in the second round if the first one is selected (without repetition)
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
p_cyan_1 <-  cyan / (cyan + magenta + yellow) #peobability of choosing cyan in the first round
p_cyan_1
p_not_cyan <- (magenta + yellow)/(cyan + magenta + yellow-1) #probability of not choosing cyan in the second round if the first one is selected (without repetition)
p_not_cyan
p_not_cyan <- (magenta + yellow)/(cyan + magenta + yellow-1)
p_not_cyan
set.seed(1,sample.kind="Rounding")
card <- rep(c("cyan","mag","yellow"),times=c(3,5,7))
card
events <- sample(card,1000,replace=TRUE) #it gives us the distibution
prop.table(table(events))
mean(card=="cyan")
mean(!card=="cyan")
# or:
cyan <- 3
magenta <- 5
yellow <- 7
#peobability of choosing cyan in the first round:
p_cyan_1 <-  cyan / (cyan + magenta + yellow)
p_cyan_1
#probability of not choosing cyan in the second round if the first one is selected (without repetition)
p_not_cyan <- (magenta + yellow)/(cyan + magenta + yellow-1)
p_not_cyan
#the probability that the first draw is cyan and the second draw is not cyan
p_cyan_1*p_not_cyan
set.seed(1,sample.kind="Rounding")
cyan <- 3
magenta <- 5
yellow <- 7
#peobability of choosing cyan in the first round:
p_cyan_1 <-  cyan / (cyan + magenta + yellow)
p_cyan_1
#probability of not choosing cyan in the second round if the first one is selected (without repetition)
p_not_cyan <- (magenta + yellow)/(cyan + magenta + yellow-1)
p_not_cyan
#the probability that the first draw is cyan and the second draw is not cyan
p_cyan_1*p_not_cyan
set.seed(1,sample.kind="Rounding")
cyan <- 3
magenta <- 5
yellow <- 7
#peobability of choosing cyan in the first round:
p_cyan_1 <-  cyan / (cyan + magenta + yellow) #without replacement
p_cyan_1
#probability of not choosing cyan in the second round if the first one is selected (sampling without replacement)
p_not_cyan_without <- (magenta + yellow)/(cyan + magenta + yellow-1) #without replacement
p_not_cyan_without
#probability of not choosing cyan in the second round if the first one is selected (sampling without replacement)
p_not_cyan_with <- (magenta + yellow)/(cyan + magenta + yellow) #without replacement
p_not_cyan_with
#the probability that the first draw is cyan and the second draw is not cyan
p_cyan_1*p_not_cyan_without
p_cyan_1*p_not_cyan_with
