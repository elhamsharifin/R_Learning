n <- 1000
winning <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
S <- sum(X)
mean(S)
})
winning
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S>0)  #probability of casino losing
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
### we can plot a histogram of observes S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observes S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
###We use sampling models to run Monto Carlo Simulation and based on the result to calculate the probability of casiono losing money.
B <- 10000 #repetition over Monto Carlo
n <- 1000  #number of people
S <- replicate(B,{
X <- sample(c(-1,1),n,replace=TRUE,prob=c(9/19,10/19))
sum(X)
})
mean(S<0)  #probability of casino losing
data.frame(S=S) %>%
ggplot(aes(S,density)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..count..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
n <- 1000    # number of roulette players
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
min(S)
max(S)
library(tidyverse)
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
library(tidyverse)
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density2 <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density2,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density2,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),max(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### we can plot a histogram of observed values of S and also normal density curve based on mean and standard deviation of S.
library(tidyverse)
s <- seq(min(S),max(S),length=100) #sequence of 100 in the range of S
normal_density <- data.frame(s=s,f=dnorm(s,mean(S),sd(S))) #producing normal density for S
data.frame(S=S) %>%
ggplot(aes(S,..density..)) +
geom_histogram(color="black",binwidth=10) +
ylab("Probability") +
geom_line(data=normal_density,mapping=aes(s,f),color="blue")
### what is the chance of landing balls in green pockets:
2/(18+18+2)
### what is the chance of landing balls in green pockets:
green <- 2
red <- 18
black <- 18
P_green <- green/(green+red+black)
p_green
### what is the chance of landing balls in green pockets:
green <- 2
red <- 18
black <- 18
P_green <- green/(green+red+black)
P_green
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red_black)
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(+17,-1),1,prob=c(p_green,p_not_green))
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(17,-1),1,prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- a- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green))
X
X <- sample(c(17,-1), 1000, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green)) #replace:false
X
### compute the expected value of X:
X <- sample(c(17,-1), 1000, prob=c(p_green,p_not_green))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green)) #replace:false
X
### compute the expected value of X:
E_X <- 17 * p_green + (-1)*p_not_green #E[X]=(ap)+(b(1-p))
E_X
(17-(-1))*sqrt(p_green*p_not_green)
abs(17-(-1))*sqrt(p_green*p_not_green)  # |b-a|sqrt(p(1-p))
### Predict sum of winnings
### create a random variable S which sums your winnings after betting on green 1,000 times.
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
n <- 1000
X <- sample(c(17,-1),1000,replace=TRUE,prob=c(p_green,p_not_green))
sum(X)
E_S <- n *((p_green*17)+(p_not_green)*(-1))
E_S
se_S <- sqrt(n)*abs(-1+-17)*sqrt(p_green*p_not_green)
se_S <- sqrt(n)*abs(-1+-17)*sqrt(p_green*p_not_green)
se_S
knitr::opts_chunk$set(echo = TRUE)
### Predict sum of winnings
### create a random variable S which sums your winnings after betting on green 1,000 times.
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
n <- 1000
X <- sample(c(17,-1),1000,replace=TRUE,prob=c(p_green,p_not_green))
S <- sum(X)
S
### What is the expected value of S?
E_S <- n *((p_green*17)+(p_not_green)*(-1))
E_S
### What is the standard error of S?
se_S <- sqrt(n)*abs(-1+-17)*sqrt(p_green*p_not_green)
se_S
# sqrt(n)|b-a|sqrt(p(1-p))
### Create a model to predict your winnings from betting on green one time:
set.seed(1,sample.kind="Rounding")
green <- 2
red <- 18
black <- 18
p_green <- green/(green+red+black)
p_not_green <- 1- p_green
X <- sample(c(17,-1), 1, prob=c(p_green,p_not_green)) #this is only 1 sample and do not need replace=TRUE
X
### compute the expected value of X:
E_X <- 17 * p_green + (-1)*p_not_green #E[X]=(ap)+(b(1-p))
E_X
### compute the standard error of random variable of X that shows a single outcome after one spin of the roulette wheel.
abs(17-(-1))*sqrt(p_green*p_not_green)  # |b-a|sqrt(p(1-p))
E_X
E_S
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_nor_green)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p))
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
suppose:
p_green <- 2/38
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(17*p_green + -1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
avg <- (17*p_green)/(17*p_green + -1*p_not_green) #ap/b(1-p)
avg
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
suppose:
p_green <- 2/38
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(-1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(-1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(-1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(-1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- (17*p_green)/(-1*p_not_green) #ap/b(1-p)
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
avg <- n*(17*p_green)/(-1*p_not_green) #n*(ap/b(1-p))
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
# avg: the expected outcome of 100 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
avg <- n*(17*p_green)*(-1*p_not_green) #n×(ap+b(1−p))
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
### What is the probability that you end up winning money if you bet on green 100 times?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
# avg: the expected outcome of 100 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
avg <- n*((17*p_green)+(-1*p_not_green)) #n×(ap+b(1−p))
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
### the probability of ending uo winning money on betting 100 times on green
pnorm(0,avg,se) #loosing (pr <= 0$)
1-pnorm(0,avg,se)  #1-loosing=winning
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)   #sqrt(n)|b-a|sqrt(p(1-p)) standard error of sum of n outcomes
se
# avg: the expected outcome of 100 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
avg <- n*((17*p_green)+(-1*p_not_green)) #n×(ap+b(1−p))
avg
monot_S <- replicate(B=10000,{
avg <- n*((17*p_green)+(-1*p_not_green))
se <- sqrt(n)*abs(17- -1)*sqrt(p_green*p_not_green)
})
S <- replicate(B=10000,{
simulated_list <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green))
})
### Generate monto Carlo simulation that genrate 10000 outcomes of S (summ of 100 bets). compare the expected value and standar deviation of list with expected value and standard devaition calculated for S?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
n <- 100
B <- 10000
S <- replicate(B,{
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green))
sum(X)
})
avg_monto <- mean(S)
sd_monto <- sd(S)
avg_monto <- mean(S)
avg_monto
sd_monto <- sd(S)
sd_monto
S
mean(S>0)
### define a random variable Y containing the average winning per bet after betting on green 10,000 times.
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green)) # we dont need to use replicate and we can use just 10000 in sample
Y <- mean(X)
Y
E_X <- p_green*17+p_not_green*-1
E_X
spins?
sqrt(10000)*abs(17--1)*sqrt(p_green*p_not_green)
### What is the standard error of Y, the average result of 10,000 spins?
sqrt(10000)*abs(17 - -1)*sqrt(p_green*p_not_green) #sqrt(n)|b-a|sqrt(p(1-p))
### What is the standard error of Y, the average result of 10,000 spins?
abs(17 - -1)*sqrt(p_green*p_not_green)/10000 #(σ/√n)
### What is the standard error of Y, the average result of 10,000 spins?
sqrt(10000)*abs(17- -1)*sqrt(p_green*p_not_green)/10000 #(σ=sqrt(n)|b-a|sqrt(p(1-p))/√n)
1-pnorm(0,E_X,se)
### What is the standard error of Y, the average result of 10,000 spins?
se <- abs(17- -1)*sqrt(p_green*p_not_green)/sqrt(10000) #(σ=sqrt(n)|b-a|sqrt(p(1-p))/√n)
se
1-pnorm(0,E_X,se)
### generate a Monte Carlo simulation producing 10,000 outcomes of S, the average outcome from 10,000 bets on green. Calculate the avg and standard error and compare with CLT results?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
B <- 10000
n <- 10000
S <- replicate(B,{
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green))
sum(X)
})
avg <- avg(S)
### generate a Monte Carlo simulation producing 10,000 outcomes of S, the average outcome from 10,000 bets on green. Calculate the avg and standard error and compare with CLT results?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
B <- 10000
n <- 10000
S <- replicate(B,{
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green))
sum(X)
})
avg <- mean(S)
avg
se <- sd(X)
se
### generate a Monte Carlo simulation producing 10,000 outcomes of S, the average outcome from 10,000 bets on green. Calculate the avg and standard error and compare with CLT results?
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
B <- 10000
n <- 10000
S <- replicate(B,{
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green))
mean(X)
})
avg <- mean(S)
avg
se <- sd(S)
se
### define a random variable Y containing the average winning per bet after betting on green 10,000 times.
set.seed(1,sample.kind="Rounding")
p_green <- 2/38  #assume
p_not_green <- 1-p_green
X <- sample(c(17,-1),n,replace=TRUE,prob=c(p_green,p_not_green)) # we dont need to use replicate and we can use just 10000 in sample
Y <- mean(X)
Y
### What is the expected value of the average outcome per bet after betting on green 10,000 times?
E_X <- p_green*17+p_not_green*-1  #refer to Average of multiple draws of a random variable
E_X
### What is the standard error of Y, the average result of 10,000 spins?
se <- abs(17- -1)*sqrt(p_green*p_not_green)/sqrt(10000) #σ/√n = |b-a|√(p(1-p))/√n
### What is the probability that your winnings are positive after betting on green 10,000 times?
1-pnorm(0,E_X,se)
mean(S>0)
